{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BuckUTT API","text":"<p>BuckUTT est le syst\u00e8me de paiement d\u00e9mat\u00e9rialis\u00e9 du BDE de l'UTT, h\u00e9berg\u00e9 par l'UTT Net Group.</p> <p>La conception originelle de l'API remonte \u00e0 2014. Depuis, il n'y a pas eu de maintenance ni de mise \u00e0 jour. Certaines d\u00e9pendances sont devenues obsol\u00e8tes et personne n'est actuellement en mesure de r\u00e9soudre les bugs qui surviennent. Le code n'est pas document\u00e9, pas test\u00e9 et peu comment\u00e9.</p> <p>Ce projet a pour but de r\u00e9\u00e9crire l'API, en l'am\u00e9liorant, en la documentant et en la testant.</p> <p>Le code actuel est une preuve de concept qui n'a pas (encore) vocation \u00e0 \u00eatre utilis\u00e9 en production. Il est \u00e9crit en Python 3.11 avec le framework Django 4.2. La rapidit\u00e9 et la facilit\u00e9 de d\u00e9veloppement avec Django en font un choix id\u00e9al pour ce genre de prototype.</p>"},{"location":"#organisation-du-projet","title":"Organisation du projet","text":"<p>Le projet est organis\u00e9 en plusieurs applications Django. Chacune est organis\u00e9e de la mani\u00e8re suivante :</p> <pre><code>application/\n    tests/     # Tests unitaires\n        __init__.py\n        test_model.py  # tests li\u00e9s directement aux mod\u00e8les et \u00e0 l'ORM\n        test_api.py    # tests li\u00e9s \u00e0 l'API REST\n    __init__.py\n    admin.py   # Administration Django\n    api.py     # API REST\n    apps.py    # Configuration de l'application\n    models.py  # Mod\u00e8les de l'ORM\n    schemas.py # Sch\u00e9mas de validation des donn\u00e9es\n</code></pre> <p>Il y a au total 4 applications :</p> <ul> <li><code>article</code> : gestion des articles, de leurs cat\u00e9gories et de leur prix</li> <li><code>selling_points</code> : gestion des points de vente et des machines</li> <li><code>transaction</code> : gestion des achats et des rechargements de compte</li> <li><code>users</code> : gestion des utilisateurs</li> </ul> <p>Le dossier <code>buckutt/</code> contient les fichiers de configuration de Django et les fichiers communs \u00e0 toutes les applications.</p> <p>Le projet contient \u00e9galement un dossier <code>docs/</code> qui contient la documentation du projet. Elle est \u00e9crite en Markdown et compil\u00e9e en HTML avec MkDocs.</p>"},{"location":"install/","title":"Installation du projet","text":""},{"location":"install/#prerequis","title":"Pr\u00e9requis","text":"<p>Pour installer le projet, vous aurez besoin de :</p> <ul> <li>git (documentation officielle)</li> <li>Python 3.11 (documentation officielle)</li> <li>Poetry (documentation officielle)</li> <li>PostgreSQL (documentation officielle)</li> </ul>"},{"location":"install/#installation-sur-une-distribution-linux","title":"Installation sur une distribution Linux","text":"<p>Commencez par cloner le projet :</p> <pre><code>git clone  </code></pre> <p>Puis, pour cr\u00e9er la base de donn\u00e9es :</p> <pre><code>sudo su - postgres\n\npsql\n\nCREATE DATABASE buckutt;\nCREATE USER buckutt WITH PASSWORD 'choississez un mot de passe';\nGRANT ALL PRIVILEGES ON DATABASE buckutt TO buckutt;\nALTER ROLE buckutt SET client_encoding TO 'utf8';\nALTER ROLE buckutt SET default_transaction_isolation TO 'read committed';\nALTER ROLE buckutt SET timezone TO 'UTC';\n\\q\n</code></pre> <p>Une fois la base de donn\u00e9es cr\u00e9\u00e9e, vous pouvez renommer le fichier <code>.env.example</code> en <code>.env</code> et le modifier pour qu'il corresponde \u00e0 votre configuration. Commencez par renseigner le clef secr\u00e8te de Django (<code>SECRET_KEY</code>). Pour \u00e7a, vous pouvez utiliser le site djecrety.ir. Renseignez ensuite les informations de connexion \u00e0 la base de donn\u00e9es (<code>DB_NAME</code> et <code>DB_PASSWORD</code>).</p> <p>Ensuite, installez les d\u00e9pendances du projet :</p> <pre><code>poetry install\n\n# Ou bien, si vous voulez installer le moins de d\u00e9pendances possible :\npoetry install --without docs,dev\n</code></pre> <p>Puis, cr\u00e9ez les tables de la base de donn\u00e9es :</p> <pre><code>poetry run ./manage.py migrate\npoetry run loaddata fixtures.json\n</code></pre> <p>Enfin, lancez le serveur de d\u00e9veloppement :</p> <pre><code>poetry run ./manage.py runserver\n</code></pre>"},{"location":"install/#windows","title":"Windows","text":"<p>PTDR t'utilises Windows ? Bah \u00e9cris les instructions toi-m\u00eame.</p>"},{"location":"philosophie/","title":"Philosophie du projet","text":"<p>Ce projet est une preuve de concept de r\u00e9\u00e9criture de l'API BuckUTT. Son but n'est pas de remplacer l'API actuelle, mais de servir de base pour la r\u00e9\u00e9criture. Il n'est cependant pas exclu de garder le code actuel et de l'\u00e9toffer  jusqu'\u00e0 ce qu'il soit utilisable en production.</p> <p>L'emphase est mise sur la vitesse et la facilit\u00e9 de d\u00e9veloppement. De ce point de vue, Django est un choix id\u00e9al.</p> <p>Le deuxi\u00e8me point important est la documentation. Le code est comment\u00e9 et document\u00e9, et la documentation est g\u00e9n\u00e9r\u00e9e par MkDocs. En outre, les sch\u00e9mas de validation permettent \u00e0 django-ninja de g\u00e9n\u00e9rer une documentation de l'API REST \u00e0 travers une interface Swagger.</p> <p>Le troisi\u00e8me point est la pertinence des codes HTTP retourn\u00e9s. La version actuelle de l'API retourne presque toujours des codes 500 en cas d'erreur, quelle qu'elle soit. Le code actuel essaie donc de retourner des codes HTTP pertinents, m\u00eame si cela implique d'effectuer des requ\u00eates suppl\u00e9mentaires \u00e0 la base de donn\u00e9es.</p> <p>La performance n'est pas le souci principal pour le moment.</p>"},{"location":"api/article/api/","title":"API","text":""},{"location":"api/article/api/#article.api.ArticleController","title":"<code>ArticleController</code>","text":"<p>         Bases: <code>ControllerBase</code></p> <p>Contr\u00f4leur pour les articles.</p>"},{"location":"api/article/api/#article.api.ArticleController.fetch_available","title":"<code>fetch_available(selling_point_id, user_id)</code>","text":"<p>Retourne tous les produits disponibles pour un utilisateur dans un point de vente, \u00e0 l'instant pr\u00e9sent, en annotant le prix de chaque produit pour l'utilisateur.</p> <p>Le prix du produit pour un utilisateur sera toujours le plus petit parmi les prix de tous les groupes auxquels l'utilisateur appartient.</p> <p>Retourne une liste d'objets de type AvailableArticleSchema.</p> <p>Parameters:</p> Name Type Description Default <code>selling_point_id</code> <code>PrimaryKey</code> <p>l'id du point de vente</p> required <code>user_id</code> <code>PrimaryKey</code> <p>l'id de l'utilisateur dont on veut les produits disponibles</p> required"},{"location":"api/article/models/","title":"Model","text":""},{"location":"api/article/models/#article.models.Article","title":"<code>Article</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Repr\u00e9sente un article.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>nom de l'article</p> <code>category</code> <code>ForeignKey</code> <p>cat\u00e9gorie de l'article</p> <code>stock</code> <code>IntegerField</code> <p>stock de l'article</p> <code>is_removed</code> <code>BooleanField</code> <p>indique si l'article est supprim\u00e9</p>"},{"location":"api/article/models/#article.models.ArticleQuerySet","title":"<code>ArticleQuerySet</code>","text":"<p>         Bases: <code>models.QuerySet</code></p> <p>QuerySet personnalis\u00e9 pour les articles.</p>"},{"location":"api/article/models/#article.models.ArticleQuerySet.annotate_foundation_for","title":"<code>annotate_foundation_for(user)</code>","text":"<p>Annote le queryset avec la fondation s'appliquant \u00e0 l'utilisateur donn\u00e9.</p> <p>La fondation d'un article pour un utilisateur est la fondation associ\u00e9e au prix le plus bas parmi ceux applicables \u00e0 l'utilisateur.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>l'utilisateur pour lequel la fondation doit \u00eatre annot\u00e9e</p> required"},{"location":"api/article/models/#article.models.ArticleQuerySet.annotate_price_for","title":"<code>annotate_price_for(user)</code>","text":"<p>Annote le queryset avec le prix s'appliquant \u00e0 l'utilisateur donn\u00e9.</p> <p>Le prix d'un article pour un utilisateur est le prix le plus bas parmi ceux applicables \u00e0 ce dernier.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>l'utilisateur pour lequel le prix doit \u00eatre annot\u00e9</p> required"},{"location":"api/article/models/#article.models.ArticleQuerySet.available","title":"<code>available()</code>","text":"<p>Filtre le queryset pour ne garder que les articles disponibles.</p> <p>Un article est consid\u00e9r\u00e9 comme disponible si sa colonne <code>is_removed</code> est \u00e0 False.</p>"},{"location":"api/article/models/#article.models.ArticleQuerySet.available_now","title":"<code>available_now()</code>","text":"<p>Filtre le queryset pour ne garder que les articles disponibles \u00e0 l'heure actuelle.</p> <p>Un article est consid\u00e9r\u00e9 comme disponible maintenant si sa colonne is_removed est \u00e0 False et qu'il poss\u00e8de au moins un prix applicable \u00e0 l'heure actuelle.</p>"},{"location":"api/article/models/#article.models.ArticleQuerySet.for_user","title":"<code>for_user(user)</code>","text":"<p>Filtre le queryset pour ne garder que les articles poss\u00e9dant au moins un prix applicable \u00e0 l'utilisateur donn\u00e9.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>l'utilisateur pour lequel les articles doivent \u00eatre filtr\u00e9s</p> required"},{"location":"api/article/models/#article.models.ArticleQuerySet.in_point","title":"<code>in_point(point)</code>","text":"<p>Filtre le queryset pour ne garder que les articles vendus dans le point de vente donn\u00e9.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>selling_points.models.SellingPoint</code> <p>le point de vente pour lequel les articles doivent \u00eatre filtr\u00e9s</p> required"},{"location":"api/article/models/#article.models.Category","title":"<code>Category</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Repr\u00e9sente une cat\u00e9gorie d'articles.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>nom de la cat\u00e9gorie</p>"},{"location":"api/article/models/#article.models.Foundation","title":"<code>Foundation</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Repr\u00e9sente une fondation.</p> <p>Une fondation est une personne morale qui peut vendre des articles. Par exemple, le BDE est une fondation</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>nom de la fondation</p> <code>website</code> <code>URLField</code> <p>site web de la fondation</p> <code>mail</code> <code>EmailField</code> <p>adresse mail de la fondation</p> <code>is_removed</code> <code>BooleanField</code> <p>indique si la fondation est supprim\u00e9e</p>"},{"location":"api/article/models/#article.models.Period","title":"<code>Period</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Repr\u00e9sente une p\u00e9riode de validit\u00e9 d'un prix.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>nom de la p\u00e9riode</p> <code>start</code> <code>DateTimeField</code> <p>date de d\u00e9but de la p\u00e9riode</p> <code>end</code> <code>DateTimeField</code> <p>date de fin de la p\u00e9riode (optionnelle)</p>"},{"location":"api/article/models/#article.models.Price","title":"<code>Price</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Repr\u00e9sente un prix d'un article pour une fondation et une p\u00e9riode donn\u00e9es.</p> Unicit\u00e9 du prix <p>Il ne peut exister qu'un seul prix par ensemble article-fondation-p\u00e9riode-group.</p> <p>Attributes:</p> Name Type Description <code>amount</code> <code>DecimalField</code> <p>montant du prix</p> <code>article</code> <code>ForeignKey</code> <p>article auquel le prix s'applique</p> <code>foundation</code> <code>ForeignKey</code> <p>fondation \u00e0 laquelle le prix s'applique</p> <code>period</code> <code>ForeignKey</code> <p>p\u00e9riode de validit\u00e9 du prix</p> <code>group</code> <code>ForeignKey</code> <p>groupe d'utilisateurs auquel le prix s'applique</p> <code>is_removed</code> <code>BooleanField</code> <p>indique si le prix est supprim\u00e9</p>"},{"location":"api/article/schemas/","title":"Schemas","text":""},{"location":"api/article/schemas/#article.schemas.AvailableArticleSchema","title":"<code>AvailableArticleSchema</code>","text":"<p>         Bases: <code>ModelSchema</code></p> <p>Sch\u00e9ma de s\u00e9rialisation pour un article disponible, avec son id, son nom, l'id de sa cat\u00e9gorie, son stock, son prix et l'id de sa fondation (Article).</p>"},{"location":"api/article/schemas/#article.schemas.SimpleArticleSchema","title":"<code>SimpleArticleSchema</code>","text":"<p>         Bases: <code>ModelSchema</code></p> <p>Sch\u00e9ma de s\u00e9rialisation pour un article contenant uniquement son id, son nom et l'id de sa cat\u00e9gorie (Article).</p>"},{"location":"api/article/schemas/#article.schemas.SimpleCategorySchema","title":"<code>SimpleCategorySchema</code>","text":"<p>         Bases: <code>ModelSchema</code></p> <p>Sch\u00e9ma de s\u00e9rialisation pour une cat\u00e9gorie d'article (Category).</p>"},{"location":"api/selling_points/models/","title":"Models","text":""},{"location":"api/selling_points/models/#selling_points.models.Device","title":"<code>Device</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Repr\u00e9sente un appareil utilis\u00e9 pour la vente.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>nom de l'appareil</p> <code>selling_point</code> <code>ForeignKey[SellingPoint]</code> <p>point de vente dans lequel l'appareil est utilis\u00e9</p> <code>is_removed</code> <code>BooleanField</code> <p>indique si l'appareil est supprim\u00e9</p>"},{"location":"api/selling_points/models/#selling_points.models.SellingPoint","title":"<code>SellingPoint</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Repr\u00e9sente un point de vente.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>nom du point de vente</p> <code>articles</code> <code>ManyToManyField[Article]</code> <p>articles vendus dans ce point de vente</p> <code>is_removed</code> <code>BooleanField</code> <p>indique si le point de vente est supprim\u00e9</p>"},{"location":"api/selling_points/schemas/","title":"Schemas","text":""},{"location":"api/selling_points/schemas/#selling_points.schemas.SimplePointSchema","title":"<code>SimplePointSchema</code>","text":"<p>         Bases: <code>ModelSchema</code></p> <p>Sch\u00e9ma de s\u00e9rialisation pour un point de vente contenant uniquement son id et son nom (SellingPoint).</p>"},{"location":"api/transaction/api/","title":"API","text":""},{"location":"api/transaction/api/#transaction.api.PurchaseController","title":"<code>PurchaseController</code>","text":"<p>         Bases: <code>ControllerBase</code></p> <p>Contr\u00f4leur pour les achats.</p>"},{"location":"api/transaction/api/#transaction.api.PurchaseController.create","title":"<code>create(body)</code>","text":"<p>Cr\u00e9e une transaction.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>PurchaseRequest</code> <p>Les informations de la transaction.</p> required"},{"location":"api/transaction/api/#transaction.api.PurchaseController.fetch","title":"<code>fetch(filters=Query(Ellipsis))</code>","text":"<p>R\u00e9cup\u00e8re les achats correspondant aux filtres donn\u00e9s.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>PurchaseFilterSchema</code> <p>Les filtres \u00e0 appliquer.</p> <code>Query(Ellipsis)</code>"},{"location":"api/transaction/api/#transaction.api.PurchaseController.fetch_summary","title":"<code>fetch_summary(filters=Query(Ellipsis))</code>","text":"<p>R\u00e9cup\u00e8re un r\u00e9sum\u00e9 des achats correspondant aux filtres donn\u00e9s.</p> <p>Le r\u00e9sultat est s\u00e9rialis\u00e9 sous la forme d'une liste de PurchaseSummarySchema.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>PurchaseFilterSchema</code> <p>Les filtres \u00e0 appliquer.</p> <code>Query(Ellipsis)</code>"},{"location":"api/transaction/api/#transaction.api.ReloadController","title":"<code>ReloadController</code>","text":"<p>         Bases: <code>ControllerBase</code></p> <p>Contr\u00f4leur pour les rechargements.</p> <p>Les rechargements sont des transactions qui permettent \u00e0 un utilisateur d'ajouter du cr\u00e9dit \u00e0 son compte.</p>"},{"location":"api/transaction/api/#transaction.api.ReloadController.create","title":"<code>create(body)</code>","text":"<p>Cr\u00e9e un rechargement.</p> <p>Retourne l'utilisateur ayant effectu\u00e9 le rechargement s\u00e9rialis\u00e9 sous la forme d'un SimpleUserSchema.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>ReloadRequest</code> <p>Les informations du rechargement.</p> required"},{"location":"api/transaction/api/#transaction.api.ReloadController.fetch","title":"<code>fetch(filters=Query(Ellipsis))</code>","text":"<p>R\u00e9cup\u00e8re les rechargements correspondant aux filtres donn\u00e9s.</p> <p>Retourne une liste de ReloadSchema.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>ReloadFilterSchema</code> <p>Les filtres \u00e0 appliquer.</p> <code>Query(Ellipsis)</code>"},{"location":"api/transaction/api/#transaction.api.ReloadController.fetch_summary","title":"<code>fetch_summary(filters=Query(Ellipsis))</code>","text":"<p>R\u00e9cup\u00e8re un r\u00e9sum\u00e9 des rechargements correspondant aux filtres donn\u00e9s.</p> <p>Le r\u00e9sultat est s\u00e9rialis\u00e9 sous la forme d'une liste de ReloadSummarySchema.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>ReloadFilterSchema</code> <p>Les filtres \u00e0 appliquer.</p> <code>Query(Ellipsis)</code>"},{"location":"api/transaction/api/#transaction.api.TreasuryController","title":"<code>TreasuryController</code>","text":"<p>         Bases: <code>ControllerBase</code></p> <p>Contr\u00f4leur pour la tr\u00e9sorerie.</p>"},{"location":"api/transaction/api/#transaction.api.TreasuryController.get_total_credit","title":"<code>get_total_credit()</code>","text":"<p>R\u00e9cup\u00e8re le montant total du cr\u00e9dit de tous les utilisateurs.</p> <p>Le r\u00e9sultat est s\u00e9rialis\u00e9 sous la forme d'un TotalAmountSchema.</p>"},{"location":"api/transaction/models/","title":"Models","text":""},{"location":"api/transaction/models/#transaction.models.Cart","title":"<code>Cart(customer, seller, point)</code>","text":"<p>Repr\u00e9sente un panier d'achat.</p> <p>Il s'agit d'une classe interm\u00e9diaire pour faciliter la cr\u00e9ation d'un groupe d'achats \u00e0 partir d'une liste de clefs primaires d'articles.</p> <p>Il ne s'agit pas d'un mod\u00e8le de donn\u00e9es. La classe <code>Cart</code> ne correspond pas \u00e0 une table de la base de donn\u00e9es.</p> <p>Examples:</p> <pre><code>from transaction.models import Cart\nfrom users.models import User\nfrom selling_points.models import SellingPoint\ncustomer = User.objects.get(pk=1)\nseller = User.objects.get(pk=2)\npoint = SellingPoint.objects.get(pk=1)\ncart = Cart(customer, seller, point)\n</code></pre> <p>Une fois le panier cr\u00e9\u00e9, l'ajout d'articles se fait en appelant la m\u00e9thode add_article avec une liste d'ids d'articles :</p> <pre><code>cart.add_articles([1, 2, 3])\ncart.add_articles([4, 5, 6])\ncart.save()  # enregistre les achats correspondant aux articles dans la db\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>customer</code> <code>User</code> <p>L'utilisateur qui ach\u00e8te les articles</p> required <code>seller</code> <code>User</code> <p>L'utilisateur qui vend les articles</p> required <code>point</code> <code>SellingPoint</code> <p>Le point de vente o\u00f9 l'achat est effectu\u00e9</p> required"},{"location":"api/transaction/models/#transaction.models.Cart.total_price","title":"<code>total_price: Decimal</code>  <code>property</code>","text":"<p>Prix total des articles dans le panier.</p>"},{"location":"api/transaction/models/#transaction.models.Cart.add_articles","title":"<code>add_articles(ids)</code>","text":"<p>Ajoute les articles dont les ids sont donn\u00e9s \u00e0 la liste des articles du panier.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[PrimaryKey]</code> <p>liste des ids des articles \u00e0 ajouter au panier</p> required <p>Raises:</p> Type Description <code>Article.DoesNotExist</code> <p>si un des ids donn\u00e9s ne correspond \u00e0 aucun article disponible \u00e0 la vente pour l'utilisateur.</p> Warning <p>L'appel de cette m\u00e9thode effectue une requ\u00eate \u00e0 la base de donn\u00e9es pour r\u00e9cup\u00e9rer les articles correspondants aux ids donn\u00e9s. Essayez de ne l'utiliser qu'une seule fois par panier.</p>"},{"location":"api/transaction/models/#transaction.models.Cart.save","title":"<code>save()</code>","text":"<p>Enregistre les achats dans la base de donn\u00e9es et retire le montant correspondant du compte de l'utilisateur.</p> <p>Raises:</p> Type Description <code>IntegrityError</code> <p>si le solde du compte de l'utilisateur est insuffisant</p>"},{"location":"api/transaction/models/#transaction.models.Purchase","title":"<code>Purchase</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Repr\u00e9sente un achat d'article.</p> <p>Attributes:</p> Name Type Description <code>date</code> <code>DateTimeField</code> <p>date et heure de l'achat</p> <code>price</code> <code>DecimalField</code> <p>prix de l'achat</p> <code>buyer</code> <code>ForeignKey[User]</code> <p>acheteur</p> <code>seller</code> <code>ForeignKey[User]</code> <p>vendeur</p> <code>article</code> <code>ForeignKey[Article]</code> <p>article achet\u00e9</p> <code>point</code> <code>ForeignKey[SellingPoint]</code> <p>point de vente ou l'achat a \u00e9t\u00e9 effectu\u00e9</p> <code>foundation</code> <code>ForeignKey[Foundation]</code> <p>fondation \u00e0 laquelle l'achat est associ\u00e9</p> Redondance du prix <p>La colonne <code>price</code> peut sembler redondante, sachant qu'il y a la colonne <code>article</code>, \u00e0 partir de laquelle on peut remonter au prix de l'article. Cependant, il est possible que ledit prix vienne \u00e0 \u00eatre modifi\u00e9, et il est important de garder une trace du prix au moment de l'achat.</p>"},{"location":"api/transaction/models/#transaction.models.Reload","title":"<code>Reload</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Repr\u00e9sente un rechargement du compte d'un utilisateur.</p> <p>Un rechargement est effectu\u00e9 par un utilisateur et est effectu\u00e9 par un vendeur dans un point de vente.</p> <p>Le montant du rechargement est ajout\u00e9 au solde du compte de l'utilisateur.</p> <p>Attributes:</p> Name Type Description <code>date</code> <code>DateTimeField</code> <p>Date et heure du rechargement</p> <code>amount</code> <code>DecimalField</code> <p>Montant du rechargement</p> <code>trace</code> <code>CharField</code> <p>Trace du rechargement (pour les paiements par carte)</p> <code>buyer</code> <code>ForeignKey[User]</code> <p>Utilisateur dont le compte est recharg\u00e9</p> <code>seller</code> <code>ForeignKey[User]</code> <p>Utilisateur qui effectue le rechargement</p> <code>point</code> <code>ForeignKey[SellingPoint]</code> <p>Point de vente o\u00f9 le rechargement est effectu\u00e9</p>"},{"location":"api/transaction/schemas/","title":"Schemas","text":""},{"location":"api/transaction/schemas/#transaction.schemas.PurchaseFilterSchema","title":"<code>PurchaseFilterSchema</code>","text":"<p>         Bases: <code>FilterSchema</code></p> <p>Sch\u00e9ma de filtrage pour les recherches d'achats.</p> <p>Attributes:</p> Name Type Description <code>before_date</code> <code>datetime</code> <p>pour les achats avant cette date</p> <code>after_date</code> <code>datetime</code> <p>pour les achats apr\u00e8s cette date</p> <code>buyer_id</code> <code>PrimaryKey</code> <p>pour s\u00e9lectionner les achats d'un acheteur</p> <code>foundation_id</code> <code>PrimaryKey</code> <p>pour s\u00e9lectionner les achats d'une fondation</p>"},{"location":"api/transaction/schemas/#transaction.schemas.PurchaseRequest","title":"<code>PurchaseRequest</code>","text":"<p>         Bases: <code>Schema</code></p> <p>Valide les donn\u00e9es n\u00e9cessaires pour cr\u00e9er un achat.</p> <p>Attributes:</p> Name Type Description <code>buyer_id</code> <code>PrimaryKey</code> <p>id de l'acheteur</p> <code>selling_point_id</code> <code>PrimaryKey</code> <p>id du point de vente</p> <code>articles</code> <code>list[PrimaryKey]</code> <p>liste des ids des articles</p>"},{"location":"api/transaction/schemas/#transaction.schemas.PurchaseSchema","title":"<code>PurchaseSchema</code>","text":"<p>         Bases: <code>ModelSchema</code></p> <p>Sch\u00e9ma de s\u00e9rialisation pour un achat (Purchase).</p>"},{"location":"api/transaction/schemas/#transaction.schemas.PurchaseSummarySchema","title":"<code>PurchaseSummarySchema</code>","text":"<p>         Bases: <code>Schema</code></p> <p>Sch\u00e9ma de s\u00e9rialisation pour un r\u00e9sum\u00e9 d'achat.</p> <p>Attributes:</p> Name Type Description <code>article_name</code> <code>str</code> <p>nom de l'article</p> <code>point_name</code> <code>str</code> <p>nom du point de vente</p> <code>price</code> <code>float</code> <p>prix de l'article</p> <code>count</code> <code>PositiveInt</code> <p>nombre d'articles achet\u00e9s</p> <code>total</code> <code>float</code> <p>prix total de l'achat</p>"},{"location":"api/transaction/schemas/#transaction.schemas.ReloadFilterSchema","title":"<code>ReloadFilterSchema</code>","text":"<p>         Bases: <code>FilterSchema</code></p> <p>Sch\u00e9ma de filtrage pour les recherches de rechargements.</p> <p>Attributes:</p> Name Type Description <code>before_date</code> <code>datetime</code> <p>pour les rechargements avant cette date</p> <code>after_date</code> <code>datetime</code> <p>pour les rechargements apr\u00e8s cette date</p> <code>buyer_id</code> <code>PrimaryKey</code> <p>pour s\u00e9lectionner les rechargements d'un acheteur</p>"},{"location":"api/transaction/schemas/#transaction.schemas.ReloadRequest","title":"<code>ReloadRequest</code>","text":"<p>         Bases: <code>Schema</code></p> <p>Valide les donn\u00e9es n\u00e9cessaires pour cr\u00e9er un rechargement.</p> <p>Attributes:</p> Name Type Description <code>buyer_id</code> <code>PrimaryKey</code> <p>id de l'acheteur</p> <code>selling_point_id</code> <code>PrimaryKey</code> <p>id du point de vente</p> <code>amount</code> <code>Decimal</code> <p>montant du rechargement</p>"},{"location":"api/transaction/schemas/#transaction.schemas.ReloadSchema","title":"<code>ReloadSchema</code>","text":"<p>         Bases: <code>ModelSchema</code></p> <p>Sch\u00e9ma de s\u00e9rialisation pour un rechargement (Reload).</p>"},{"location":"api/transaction/schemas/#transaction.schemas.ReloadSummarySchema","title":"<code>ReloadSummarySchema</code>","text":"<p>         Bases: <code>Schema</code></p> <p>Sch\u00e9ma de s\u00e9rialisation pour un r\u00e9sum\u00e9 de rechargement.</p> <p>Attributes:</p> Name Type Description <code>point_name</code> <code>str</code> <p>nom du point de vente</p> <code>count</code> <code>PositiveInt</code> <p>nombre de rechargements</p> <code>total</code> <code>float</code> <p>montant total des rechargements</p>"},{"location":"api/transaction/schemas/#transaction.schemas.TotalAmountSchema","title":"<code>TotalAmountSchema</code>","text":"<p>         Bases: <code>Schema</code></p> <p>Sch\u00e9ma de s\u00e9rialisation pour un montant total.</p> <p>Attributes:</p> Name Type Description <code>total</code> <code>float</code> <p>montant total</p>"},{"location":"api/users/models/","title":"Models","text":""},{"location":"api/users/models/#users.models.User","title":"<code>User</code>","text":"<p>         Bases: <code>AbstractUser</code></p> <p>Utilisateur du syst\u00e8me. Remplace la classe auth.User de Django</p> <p>Cette classe comprend tous les attributs de la classe django.contrib.auth.models.AbstractUser et y ajoute les attributs suivants :</p> <p>Attributes:</p> Name Type Description <code>pin</code> <code>CharField</code> <p>code PIN de l'utilisateur</p> <code>nickname</code> <code>Charfield</code> <p>surnom de l'utilisateur</p> <code>credit</code> <code>DecimalField</code> <p>cr\u00e9dit de l'utilisateur (0 par d\u00e9faut)</p> <code>is_temporary</code> <code>BooleanField</code> <p>si l'utilisateur est temporaire (False par d\u00e9faut)</p> <code>failed_auth</code> <code>BooleanField</code> <p>si l'utilisateur a \u00e9chou\u00e9 \u00e0 s'authentifier (False par d\u00e9faut)</p> <code>is_removed</code> <code>BooleanField</code> <p>si l'utilisateur est supprim\u00e9 (False par d\u00e9faut)</p>"},{"location":"api/users/schemas/","title":"Schemas","text":""},{"location":"api/users/schemas/#users.schemas.SimpleUserSchema","title":"<code>SimpleUserSchema</code>","text":"<p>         Bases: <code>ModelSchema</code></p> <p>Sch\u00e9ma de donn\u00e9es avec les informations de base d'un utilisateur. (User).</p>"}]}